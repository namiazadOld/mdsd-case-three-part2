
definition

module Common
exports
  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR

  lexical syntax
    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover}
    "*"                            -> WATERTOKENSTAR      {recover}
    WATERTOKEN                     -> WATER               
    WATERTOKENSEPARATOR            -> WATER               
    WATERTOKENSTAR                 -> WATER               

  lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]
    WATERTOKENSTAR -/- [\/]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  (

  sorts WATEREOF

  lexical restrictions
    WATEREOF -/- ~[]

  lexical syntax
    %% Lexical insertion recovery rules                                
    "\""                                           -> INSERTOPENQUOTE1 {recover}
    INSERTOPENQUOTE1 StringChar* "\n"              -> STRING           {cons("INSERTEND")}
    INSERTOPENQUOTE1 StringChar* WATEREOF          -> STRING           {cons("INSERTEND")}
    "/*"                                           -> INSERTSTART1     {recover}
    INSERTSTART1 ( ~[\*] | CommentChar )* WATEREOF -> LAYOUT           {cons("INSERTEND")}
                                                   -> "]"              {recover, cons("INSERTION")}
                                                   -> "|"              {recover, cons("INSERTION")}
                                                   -> "}"              {recover, cons("INSERTION")}

  syntax
    %% Kernel syntax insertion recovery rules   

  )

  (

  lexical syntax
    [a-zA-Z] [a-zA-Z0-9\_]*            -> ID            
    [a-zA-Z\*] [a-zA-Z0-9\_]*          -> LABEL         
    "-"? [0-9]+                        -> INT           
    "\"" StringChar* "\""              -> STRING        
    ~[\"\n]                            -> StringChar    
    "\\\""                             -> StringChar    
    BackSlashChar                      -> StringChar    
    "\\"                               -> BackSlashChar 
    [\ \t\n\r]                         -> LAYOUT        
    [\*]                               -> CommentChar   
    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT        
    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT        
                                       -> EOF           

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    LABEL -/- [a-zA-Z0-9\_]
    EOF -/- ~[]
    BackSlashChar -/- [\"]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

  )

module Yuml
imports Common

exports
  context-free start-symbols
    Start

  context-free syntax
    Line*                                                           -> Start                  {cons("YUML")}
    EntityOrNote                                                    -> Line                   {cons("EntityDefinition")}
    Relation                                                        -> Line                   {cons("RelationDefinition")}
    Note                                                            -> EntityOrNote           {cons("EntityOrNote")}
    Entity                                                          -> EntityOrNote           {cons("EntityOrNote")}
    "[" "note" ":" ID+ "]"                                          -> Note                   {cons("Note")}
    "[" ID+ Splash? ( "|" EntityDetails )* "]"                      -> Entity                 {cons("Entity")}
    NotEndPropertyOrMethod* EndPropertyOrMethod                     -> EntityDetails          {cons("EntityDetails")}
    NotEndPropertyOrMethod+                                         -> EntityDetails          {cons("EntityDetails")}
    ID+ Method? ";"                                                 -> NotEndPropertyOrMethod {cons("NotEndPropertyOrMethod")}
    ID+ Method?                                                     -> EndPropertyOrMethod    {cons("EndPropertyOrMethod")}
    "{" "bg" ":" ID "}"                                             -> Splash                 {cons("Splash")}
    "()"                                                            -> Method                 {cons("Method")}
    EntityOrNote Label? Connector Label? EntityOrNote               -> Relation               {cons("Relation")}
    INT                                                             -> Cardinality            {cons("Integer")}
    INT ".." INT                                                    -> Cardinality            {cons("Range")}
    LABEL+                                                          -> Label                  {cons("Label")}
    RelationType? Cardinality? Seperator Cardinality? RelationType? -> Connector              {cons("Connector")}
    "^"                                                             -> Connector              {cons("Inheritance")}
    "-"                                                             -> Seperator              {cons("SeperatorSimple")}
    "-.-"                                                           -> Seperator              {cons("SeperatorDependency")}
    "<"                                                             -> RelationType           {cons("LeftDirection")}
    ">"                                                             -> RelationType           {cons("RightDirection")}
    "<>"                                                            -> RelationType           {cons("Aggregation")}
    "+"                                                             -> RelationType           {cons("Aggregation")}
    "++"                                                            -> RelationType           {cons("Composition")}